{"config":{"indexing":"full","lang":["en","es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Comenzar Contexto Este paquete para Nodejs es una extensi\u00f3n de funcionalidades para objetos que se encargan de inter-process communication (IPC) . Un ejemplo de esto es ElectronJS con ipcMain , ipcRenderer y win.webContents , ya que con ellos se puede realizar la comunicaci\u00f3n del proceso principal con las distintas ventanas y viceversa. Importante La configuraci\u00f3n inicial funciona con ElectronJS por lo que para que funcione por ejemplo con NodeJS.ChildProcess , tendr\u00e1 que reimplementar _getArgsFromOn , _ipcNodeSend y colocar ipcNodeErrorObjectMode en true si quiere que tenga compatibilidad con IPCNodeError . Muy importante Este paquete utiliza Object.assign() . Todo en la interfaz IPCBaseNode se sobreescribe en el objeto que se registra con IPCNodeRegister.register .","title":"Comenzar"},{"location":"#comenzar","text":"","title":"Comenzar"},{"location":"#contexto","text":"Este paquete para Nodejs es una extensi\u00f3n de funcionalidades para objetos que se encargan de inter-process communication (IPC) . Un ejemplo de esto es ElectronJS con ipcMain , ipcRenderer y win.webContents , ya que con ellos se puede realizar la comunicaci\u00f3n del proceso principal con las distintas ventanas y viceversa. Importante La configuraci\u00f3n inicial funciona con ElectronJS por lo que para que funcione por ejemplo con NodeJS.ChildProcess , tendr\u00e1 que reimplementar _getArgsFromOn , _ipcNodeSend y colocar ipcNodeErrorObjectMode en true si quiere que tenga compatibilidad con IPCNodeError . Muy importante Este paquete utiliza Object.assign() . Todo en la interfaz IPCBaseNode se sobreescribe en el objeto que se registra con IPCNodeRegister.register .","title":"Contexto"},{"location":"en/","text":"Information Cooming soon","title":"Information"},{"location":"en/#information","text":"Cooming soon","title":"Information"}]}